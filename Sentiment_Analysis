import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense

# Load the dataset
data = pd.read_csv("1429_1.csv")
data.head()

# Preprocessing the data
from sklearn.metrics import classification_report
data = data[['reviews.text', 'reviews.rating']]
data.dropna(inplace=True)
data['sentiment'] = data['reviews.rating'].apply(lambda x: 1 if x > 3 else 0)  # Sentiment: 1 if rating > 3, else 0

# Splitting dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data['reviews.text'], data['sentiment'], test_size=0.2, random_state=42)

# Tokenizing the text data
tokenizer = Tokenizer(num_words=5000)
tokenizer.fit_on_texts(X_train)
X_train_seq = tokenizer.texts_to_sequences(X_train)
X_test_seq = tokenizer.texts_to_sequences(X_test)

# Padding sequences to ensure uniform input size
max_sequence_length = 100
X_train_pad = pad_sequences(X_train_seq, maxlen=max_sequence_length)
X_test_pad = pad_sequences(X_test_seq, maxlen=max_sequence_length)

# Building the LSTM model
embedding_vector_length = 32
model = Sequential()
model.add(Embedding(5000, embedding_vector_length, input_length=max_sequence_length))
model.add(LSTM(100))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Training the model
model.fit(X_train_pad, y_train, epochs=5, batch_size=64)

# Evaluating the model
loss, accuracy = model.evaluate(X_test_pad, y_test)
print("Test Accuracy:", accuracy)

# Generating predictions
y_pred_prob = model.predict(X_test_pad)
y_pred = [1 if prob > 0.5 else 0 for prob in y_pred_prob]

# Generating classification report
print(classification_report(y_test, y_pred))

# Predicting sentiment for each review and displaying along with the review text
for review_text, pred in zip(X_test, y_pred):
    sentiment = "Positive" if pred == 1 else "Negative"
    print(f"Review Text: {review_text}")
    print(f"Predicted Sentiment: {sentiment}\n")
